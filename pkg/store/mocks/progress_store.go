// Code generated by MockGen. DO NOT EDIT.
// Source: progress_store.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockProgressRepositor is a mock of ProgressRepositor interface
type MockProgressRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockProgressRepositorMockRecorder
}

// MockProgressRepositorMockRecorder is the mock recorder for MockProgressRepositor
type MockProgressRepositorMockRecorder struct {
	mock *MockProgressRepositor
}

// NewMockProgressRepositor creates a new mock instance
func NewMockProgressRepositor(ctrl *gomock.Controller) *MockProgressRepositor {
	mock := &MockProgressRepositor{ctrl: ctrl}
	mock.recorder = &MockProgressRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProgressRepositor) EXPECT() *MockProgressRepositorMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockProgressRepositor) Get(ctx context.Context, eID, uID string) (*store.Progress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, eID, uID)
	ret0, _ := ret[0].(*store.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProgressRepositorMockRecorder) Get(ctx, eID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProgressRepositor)(nil).Get), ctx, eID, uID)
}

// GetCompletedByIDs mocks base method
func (m *MockProgressRepositor) GetCompletedByIDs(ctx context.Context, uID string, ids ...string) ([]*store.Progress, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uID}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompletedByIDs", varargs...)
	ret0, _ := ret[0].([]*store.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedByIDs indicates an expected call of GetCompletedByIDs
func (mr *MockProgressRepositorMockRecorder) GetCompletedByIDs(ctx, uID interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uID}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedByIDs", reflect.TypeOf((*MockProgressRepositor)(nil).GetCompletedByIDs), varargs...)
}

// Start mocks base method
func (m *MockProgressRepositor) Start(ctx context.Context, eID, uID string) (*store.Progress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, eID, uID)
	ret0, _ := ret[0].(*store.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockProgressRepositorMockRecorder) Start(ctx, eID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProgressRepositor)(nil).Start), ctx, eID, uID)
}

// Complete mocks base method
func (m *MockProgressRepositor) Complete(ctx context.Context, eID, uID string) (*store.Progress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, eID, uID)
	ret0, _ := ret[0].(*store.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete
func (mr *MockProgressRepositorMockRecorder) Complete(ctx, eID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockProgressRepositor)(nil).Complete), ctx, eID, uID)
}
