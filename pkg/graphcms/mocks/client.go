// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package graphcmsmocks is a generated GoMock package.
package graphcmsmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	graphql "github.com/machinebox/graphql"
	reflect "reflect"
)

// MockCMSRequster is a mock of CMSRequster interface
type MockCMSRequster struct {
	ctrl     *gomock.Controller
	recorder *MockCMSRequsterMockRecorder
}

// MockCMSRequsterMockRecorder is the mock recorder for MockCMSRequster
type MockCMSRequsterMockRecorder struct {
	mock *MockCMSRequster
}

// NewMockCMSRequster creates a new mock instance
func NewMockCMSRequster(ctrl *gomock.Controller) *MockCMSRequster {
	mock := &MockCMSRequster{ctrl: ctrl}
	mock.recorder = &MockCMSRequsterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCMSRequster) EXPECT() *MockCMSRequsterMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockCMSRequster) Run(ctx context.Context, req *graphql.Request, resp interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockCMSRequsterMockRecorder) Run(ctx, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCMSRequster)(nil).Run), ctx, req, resp)
}
