// Code generated by MockGen. DO NOT EDIT.
// Source: timemap_handler.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockTimemapRepositor is a mock of TimemapRepositor interface
type MockTimemapRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockTimemapRepositorMockRecorder
}

// MockTimemapRepositorMockRecorder is the mock recorder for MockTimemapRepositor
type MockTimemapRepositorMockRecorder struct {
	mock *MockTimemapRepositor
}

// NewMockTimemapRepositor creates a new mock instance
func NewMockTimemapRepositor(ctrl *gomock.Controller) *MockTimemapRepositor {
	mock := &MockTimemapRepositor{ctrl: ctrl}
	mock.recorder = &MockTimemapRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimemapRepositor) EXPECT() *MockTimemapRepositorMockRecorder {
	return m.recorder
}

// GetTimemap mocks base method
func (m *MockTimemapRepositor) GetTimemap(ctx context.Context, uID string) (*store.Timemap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimemap", ctx, uID)
	ret0, _ := ret[0].(*store.Timemap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimemap indicates an expected call of GetTimemap
func (mr *MockTimemapRepositorMockRecorder) GetTimemap(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimemap", reflect.TypeOf((*MockTimemapRepositor)(nil).GetTimemap), ctx, uID)
}

// CreateTimemap mocks base method
func (m *MockTimemapRepositor) CreateTimemap(ctx context.Context, note store.Timemap) (*store.Timemap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimemap", ctx, note)
	ret0, _ := ret[0].(*store.Timemap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimemap indicates an expected call of CreateTimemap
func (mr *MockTimemapRepositorMockRecorder) CreateTimemap(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimemap", reflect.TypeOf((*MockTimemapRepositor)(nil).CreateTimemap), ctx, note)
}

// UpdateTimemap mocks base method
func (m *MockTimemapRepositor) UpdateTimemap(ctx context.Context, note *store.Timemap) (*store.Timemap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimemap", ctx, note)
	ret0, _ := ret[0].(*store.Timemap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimemap indicates an expected call of UpdateTimemap
func (mr *MockTimemapRepositorMockRecorder) UpdateTimemap(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimemap", reflect.TypeOf((*MockTimemapRepositor)(nil).UpdateTimemap), ctx, note)
}
