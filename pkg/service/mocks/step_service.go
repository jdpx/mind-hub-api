// Code generated by MockGen. DO NOT EDIT.
// Source: step_service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	service "github.com/jdpx/mind-hub-api/pkg/service"
	reflect "reflect"
)

// MockStepServicer is a mock of StepServicer interface
type MockStepServicer struct {
	ctrl     *gomock.Controller
	recorder *MockStepServicerMockRecorder
}

// MockStepServicerMockRecorder is the mock recorder for MockStepServicer
type MockStepServicerMockRecorder struct {
	mock *MockStepServicer
}

// NewMockStepServicer creates a new mock instance
func NewMockStepServicer(ctrl *gomock.Controller) *MockStepServicer {
	mock := &MockStepServicer{ctrl: ctrl}
	mock.recorder = &MockStepServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepServicer) EXPECT() *MockStepServicerMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockStepServicer) GetByID(ctx context.Context, id string) (*service.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*service.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockStepServicerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStepServicer)(nil).GetByID), ctx, id)
}

// CountByCourseID mocks base method
func (m *MockStepServicer) CountByCourseID(ctx context.Context, id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByCourseID", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByCourseID indicates an expected call of CountByCourseID
func (mr *MockStepServicerMockRecorder) CountByCourseID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByCourseID", reflect.TypeOf((*MockStepServicer)(nil).CountByCourseID), ctx, id)
}
