// Code generated by MockGen. DO NOT EDIT.
// Source: resolvers.go

// Package graphcmsmocks is a generated GoMock package.
package graphcmsmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	graphcms "github.com/jdpx/mind-hub-api/pkg/graphcms"
	reflect "reflect"
)

// MockResolverer is a mock of Resolverer interface
type MockResolverer struct {
	ctrl     *gomock.Controller
	recorder *MockResolvererMockRecorder
}

// MockResolvererMockRecorder is the mock recorder for MockResolverer
type MockResolvererMockRecorder struct {
	mock *MockResolverer
}

// NewMockResolverer creates a new mock instance
func NewMockResolverer(ctrl *gomock.Controller) *MockResolverer {
	mock := &MockResolverer{ctrl: ctrl}
	mock.recorder = &MockResolvererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolverer) EXPECT() *MockResolvererMockRecorder {
	return m.recorder
}

// ResolveCourses mocks base method
func (m *MockResolverer) ResolveCourses(ctx context.Context) ([]*graphcms.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCourses", ctx)
	ret0, _ := ret[0].([]*graphcms.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCourses indicates an expected call of ResolveCourses
func (mr *MockResolvererMockRecorder) ResolveCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCourses", reflect.TypeOf((*MockResolverer)(nil).ResolveCourses), ctx)
}

// ResolveCourse mocks base method
func (m *MockResolverer) ResolveCourse(ctx context.Context, id string) (*graphcms.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCourse", ctx, id)
	ret0, _ := ret[0].(*graphcms.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCourse indicates an expected call of ResolveCourse
func (mr *MockResolvererMockRecorder) ResolveCourse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCourse", reflect.TypeOf((*MockResolverer)(nil).ResolveCourse), ctx, id)
}

// ResolveCourseSessions mocks base method
func (m *MockResolverer) ResolveCourseSessions(ctx context.Context, id string) ([]*graphcms.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCourseSessions", ctx, id)
	ret0, _ := ret[0].([]*graphcms.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCourseSessions indicates an expected call of ResolveCourseSessions
func (mr *MockResolvererMockRecorder) ResolveCourseSessions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCourseSessions", reflect.TypeOf((*MockResolverer)(nil).ResolveCourseSessions), ctx, id)
}

// ResolveSession mocks base method
func (m *MockResolverer) ResolveSession(ctx context.Context, id string) (*graphcms.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSession", ctx, id)
	ret0, _ := ret[0].(*graphcms.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveSession indicates an expected call of ResolveSession
func (mr *MockResolvererMockRecorder) ResolveSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSession", reflect.TypeOf((*MockResolverer)(nil).ResolveSession), ctx, id)
}

// ResolveCourseStepIDs mocks base method
func (m *MockResolverer) ResolveCourseStepIDs(ctx context.Context, id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCourseStepIDs", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCourseStepIDs indicates an expected call of ResolveCourseStepIDs
func (mr *MockResolvererMockRecorder) ResolveCourseStepIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCourseStepIDs", reflect.TypeOf((*MockResolverer)(nil).ResolveCourseStepIDs), ctx, id)
}

// ResolveStep mocks base method
func (m *MockResolverer) ResolveStep(ctx context.Context, id string) (*graphcms.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveStep", ctx, id)
	ret0, _ := ret[0].(*graphcms.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveStep indicates an expected call of ResolveStep
func (mr *MockResolvererMockRecorder) ResolveStep(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveStep", reflect.TypeOf((*MockResolverer)(nil).ResolveStep), ctx, id)
}
