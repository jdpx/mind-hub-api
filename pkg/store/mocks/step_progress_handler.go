// Code generated by MockGen. DO NOT EDIT.
// Source: step_progress_handler.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockStepProgressRepositor is a mock of StepProgressRepositor interface
type MockStepProgressRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockStepProgressRepositorMockRecorder
}

// MockStepProgressRepositorMockRecorder is the mock recorder for MockStepProgressRepositor
type MockStepProgressRepositorMockRecorder struct {
	mock *MockStepProgressRepositor
}

// NewMockStepProgressRepositor creates a new mock instance
func NewMockStepProgressRepositor(ctrl *gomock.Controller) *MockStepProgressRepositor {
	mock := &MockStepProgressRepositor{ctrl: ctrl}
	mock.recorder = &MockStepProgressRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepProgressRepositor) EXPECT() *MockStepProgressRepositorMockRecorder {
	return m.recorder
}

// GetStepProgress mocks base method
func (m *MockStepProgressRepositor) GetStepProgress(ctx context.Context, sID, uID string) (*store.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepProgress", ctx, sID, uID)
	ret0, _ := ret[0].(*store.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepProgress indicates an expected call of GetStepProgress
func (mr *MockStepProgressRepositorMockRecorder) GetStepProgress(ctx, sID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepProgress", reflect.TypeOf((*MockStepProgressRepositor)(nil).GetStepProgress), ctx, sID, uID)
}

// GetCompletedProgressByStepID mocks base method
func (m *MockStepProgressRepositor) GetCompletedProgressByStepID(ctx context.Context, uID string, ids ...string) ([]*store.StepProgress, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uID}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompletedProgressByStepID", varargs...)
	ret0, _ := ret[0].([]*store.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedProgressByStepID indicates an expected call of GetCompletedProgressByStepID
func (mr *MockStepProgressRepositorMockRecorder) GetCompletedProgressByStepID(ctx, uID interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uID}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedProgressByStepID", reflect.TypeOf((*MockStepProgressRepositor)(nil).GetCompletedProgressByStepID), varargs...)
}

// StartStep mocks base method
func (m *MockStepProgressRepositor) StartStep(ctx context.Context, sID, uID string) (*store.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStep", ctx, sID, uID)
	ret0, _ := ret[0].(*store.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStep indicates an expected call of StartStep
func (mr *MockStepProgressRepositorMockRecorder) StartStep(ctx, sID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStep", reflect.TypeOf((*MockStepProgressRepositor)(nil).StartStep), ctx, sID, uID)
}

// CompleteStep mocks base method
func (m *MockStepProgressRepositor) CompleteStep(ctx context.Context, sID, uID string) (*store.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteStep", ctx, sID, uID)
	ret0, _ := ret[0].(*store.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteStep indicates an expected call of CompleteStep
func (mr *MockStepProgressRepositorMockRecorder) CompleteStep(ctx, sID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteStep", reflect.TypeOf((*MockStepProgressRepositor)(nil).CompleteStep), ctx, sID, uID)
}
