// Code generated by MockGen. DO NOT EDIT.
// Source: step_progress_service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	service "github.com/jdpx/mind-hub-api/pkg/service"
	reflect "reflect"
)

// MockStepProgressServicer is a mock of StepProgressServicer interface
type MockStepProgressServicer struct {
	ctrl     *gomock.Controller
	recorder *MockStepProgressServicerMockRecorder
}

// MockStepProgressServicerMockRecorder is the mock recorder for MockStepProgressServicer
type MockStepProgressServicerMockRecorder struct {
	mock *MockStepProgressServicer
}

// NewMockStepProgressServicer creates a new mock instance
func NewMockStepProgressServicer(ctrl *gomock.Controller) *MockStepProgressServicer {
	mock := &MockStepProgressServicer{ctrl: ctrl}
	mock.recorder = &MockStepProgressServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepProgressServicer) EXPECT() *MockStepProgressServicerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStepProgressServicer) Get(ctx context.Context, sID, userID string) (*service.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, sID, userID)
	ret0, _ := ret[0].(*service.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStepProgressServicerMockRecorder) Get(ctx, sID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStepProgressServicer)(nil).Get), ctx, sID, userID)
}

// Start mocks base method
func (m *MockStepProgressServicer) Start(ctx context.Context, sID, userID string) (*service.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, sID, userID)
	ret0, _ := ret[0].(*service.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockStepProgressServicerMockRecorder) Start(ctx, sID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStepProgressServicer)(nil).Start), ctx, sID, userID)
}

// Complete mocks base method
func (m *MockStepProgressServicer) Complete(ctx context.Context, sID, userID string) (*service.StepProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, sID, userID)
	ret0, _ := ret[0].(*service.StepProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete
func (mr *MockStepProgressServicerMockRecorder) Complete(ctx, sID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockStepProgressServicer)(nil).Complete), ctx, sID, userID)
}
