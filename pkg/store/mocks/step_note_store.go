// Code generated by MockGen. DO NOT EDIT.
// Source: step_note_store.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockStepNoteRepositor is a mock of StepNoteRepositor interface
type MockStepNoteRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockStepNoteRepositorMockRecorder
}

// MockStepNoteRepositorMockRecorder is the mock recorder for MockStepNoteRepositor
type MockStepNoteRepositorMockRecorder struct {
	mock *MockStepNoteRepositor
}

// NewMockStepNoteRepositor creates a new mock instance
func NewMockStepNoteRepositor(ctrl *gomock.Controller) *MockStepNoteRepositor {
	mock := &MockStepNoteRepositor{ctrl: ctrl}
	mock.recorder = &MockStepNoteRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepNoteRepositor) EXPECT() *MockStepNoteRepositorMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStepNoteRepositor) Get(ctx context.Context, cID, uID string) (*store.StepNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cID, uID)
	ret0, _ := ret[0].(*store.StepNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStepNoteRepositorMockRecorder) Get(ctx, cID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStepNoteRepositor)(nil).Get), ctx, cID, uID)
}

// Create mocks base method
func (m *MockStepNoteRepositor) Create(ctx context.Context, note store.StepNote) (*store.StepNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(*store.StepNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockStepNoteRepositorMockRecorder) Create(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStepNoteRepositor)(nil).Create), ctx, note)
}

// Update mocks base method
func (m *MockStepNoteRepositor) Update(ctx context.Context, note store.StepNote) (*store.StepNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, note)
	ret0, _ := ret[0].(*store.StepNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockStepNoteRepositorMockRecorder) Update(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStepNoteRepositor)(nil).Update), ctx, note)
}
