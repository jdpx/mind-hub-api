// Code generated by MockGen. DO NOT EDIT.
// Source: course_progress_service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	service "github.com/jdpx/mind-hub-api/pkg/service"
	reflect "reflect"
)

// MockCourseProgressServicer is a mock of CourseProgressServicer interface
type MockCourseProgressServicer struct {
	ctrl     *gomock.Controller
	recorder *MockCourseProgressServicerMockRecorder
}

// MockCourseProgressServicerMockRecorder is the mock recorder for MockCourseProgressServicer
type MockCourseProgressServicerMockRecorder struct {
	mock *MockCourseProgressServicer
}

// NewMockCourseProgressServicer creates a new mock instance
func NewMockCourseProgressServicer(ctrl *gomock.Controller) *MockCourseProgressServicer {
	mock := &MockCourseProgressServicer{ctrl: ctrl}
	mock.recorder = &MockCourseProgressServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseProgressServicer) EXPECT() *MockCourseProgressServicerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCourseProgressServicer) Get(ctx context.Context, cID, userID string) (*service.CourseProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cID, userID)
	ret0, _ := ret[0].(*service.CourseProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCourseProgressServicerMockRecorder) Get(ctx, cID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseProgressServicer)(nil).Get), ctx, cID, userID)
}

// Start mocks base method
func (m *MockCourseProgressServicer) Start(ctx context.Context, cID, userID string) (*service.CourseProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, cID, userID)
	ret0, _ := ret[0].(*service.CourseProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockCourseProgressServicerMockRecorder) Start(ctx, cID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCourseProgressServicer)(nil).Start), ctx, cID, userID)
}
