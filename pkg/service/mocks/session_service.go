// Code generated by MockGen. DO NOT EDIT.
// Source: session_service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	service "github.com/jdpx/mind-hub-api/pkg/service"
	reflect "reflect"
)

// MockSessionServicer is a mock of SessionServicer interface
type MockSessionServicer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServicerMockRecorder
}

// MockSessionServicerMockRecorder is the mock recorder for MockSessionServicer
type MockSessionServicerMockRecorder struct {
	mock *MockSessionServicer
}

// NewMockSessionServicer creates a new mock instance
func NewMockSessionServicer(ctrl *gomock.Controller) *MockSessionServicer {
	mock := &MockSessionServicer{ctrl: ctrl}
	mock.recorder = &MockSessionServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionServicer) EXPECT() *MockSessionServicerMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockSessionServicer) GetByID(ctx context.Context, id string) (*service.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*service.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockSessionServicerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSessionServicer)(nil).GetByID), ctx, id)
}

// GetByCourseID mocks base method
func (m *MockSessionServicer) GetByCourseID(ctx context.Context, id string) ([]*service.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourseID", ctx, id)
	ret0, _ := ret[0].([]*service.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCourseID indicates an expected call of GetByCourseID
func (mr *MockSessionServicerMockRecorder) GetByCourseID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourseID", reflect.TypeOf((*MockSessionServicer)(nil).GetByCourseID), ctx, id)
}

// CountByCourseID mocks base method
func (m *MockSessionServicer) CountByCourseID(ctx context.Context, id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByCourseID", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByCourseID indicates an expected call of CountByCourseID
func (mr *MockSessionServicerMockRecorder) CountByCourseID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByCourseID", reflect.TypeOf((*MockSessionServicer)(nil).CountByCourseID), ctx, id)
}
