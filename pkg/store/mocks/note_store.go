// Code generated by MockGen. DO NOT EDIT.
// Source: note_store.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockNoteRepositor is a mock of NoteRepositor interface
type MockNoteRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositorMockRecorder
}

// MockNoteRepositorMockRecorder is the mock recorder for MockNoteRepositor
type MockNoteRepositorMockRecorder struct {
	mock *MockNoteRepositor
}

// NewMockNoteRepositor creates a new mock instance
func NewMockNoteRepositor(ctrl *gomock.Controller) *MockNoteRepositor {
	mock := &MockNoteRepositor{ctrl: ctrl}
	mock.recorder = &MockNoteRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNoteRepositor) EXPECT() *MockNoteRepositorMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockNoteRepositor) Get(ctx context.Context, id, uID string) (*store.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, uID)
	ret0, _ := ret[0].(*store.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNoteRepositorMockRecorder) Get(ctx, id, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNoteRepositor)(nil).Get), ctx, id, uID)
}

// Create mocks base method
func (m *MockNoteRepositor) Create(ctx context.Context, note store.Note) (*store.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(*store.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNoteRepositorMockRecorder) Create(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteRepositor)(nil).Create), ctx, note)
}

// Update mocks base method
func (m *MockNoteRepositor) Update(ctx context.Context, note store.Note) (*store.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, note)
	ret0, _ := ret[0].(*store.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNoteRepositorMockRecorder) Update(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepositor)(nil).Update), ctx, note)
}
