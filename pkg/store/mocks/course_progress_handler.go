// Code generated by MockGen. DO NOT EDIT.
// Source: course_progress_handler.go

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "github.com/jdpx/mind-hub-api/pkg/store"
	reflect "reflect"
)

// MockCourseProgressRepositor is a mock of CourseProgressRepositor interface
type MockCourseProgressRepositor struct {
	ctrl     *gomock.Controller
	recorder *MockCourseProgressRepositorMockRecorder
}

// MockCourseProgressRepositorMockRecorder is the mock recorder for MockCourseProgressRepositor
type MockCourseProgressRepositorMockRecorder struct {
	mock *MockCourseProgressRepositor
}

// NewMockCourseProgressRepositor creates a new mock instance
func NewMockCourseProgressRepositor(ctrl *gomock.Controller) *MockCourseProgressRepositor {
	mock := &MockCourseProgressRepositor{ctrl: ctrl}
	mock.recorder = &MockCourseProgressRepositorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseProgressRepositor) EXPECT() *MockCourseProgressRepositorMockRecorder {
	return m.recorder
}

// GetCourseProgress mocks base method
func (m *MockCourseProgressRepositor) GetCourseProgress(ctx context.Context, cID, uID string) (*store.CourseProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseProgress", ctx, cID, uID)
	ret0, _ := ret[0].(*store.CourseProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseProgress indicates an expected call of GetCourseProgress
func (mr *MockCourseProgressRepositorMockRecorder) GetCourseProgress(ctx, cID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseProgress", reflect.TypeOf((*MockCourseProgressRepositor)(nil).GetCourseProgress), ctx, cID, uID)
}

// StartCourse mocks base method
func (m *MockCourseProgressRepositor) StartCourse(ctx context.Context, cID, uID string) (*store.CourseProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCourse", ctx, cID, uID)
	ret0, _ := ret[0].(*store.CourseProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCourse indicates an expected call of StartCourse
func (mr *MockCourseProgressRepositorMockRecorder) StartCourse(ctx, cID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCourse", reflect.TypeOf((*MockCourseProgressRepositor)(nil).StartCourse), ctx, cID, uID)
}
